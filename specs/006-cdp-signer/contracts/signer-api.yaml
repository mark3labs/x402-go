# CDP Signer API Contract
# Package: github.com/mark3labs/x402-go/signers/coinbase
# Version: 1.0.0

## Constructor

NewSigner:
  description: Creates a new CDP-backed signer instance
  signature: "func NewSigner(opts ...SignerOption) (*Signer, error)"
  
  options:
    - name: WithCDPCredentials
      signature: "func WithCDPCredentials(apiKeyName, apiKeySecret, walletSecret string) SignerOption"
      description: Sets CDP API credentials (required)
      parameters:
        - name: apiKeyName
          type: string
          description: CDP API key identifier (e.g., "organizations/xxx/apiKeys/yyy")
          required: true
        - name: apiKeySecret
          type: string
          description: PEM-encoded ECDSA or Ed25519 private key
          required: true
        - name: walletSecret
          type: string
          description: Wallet-specific secret for signing operations
          required: false (required for signing, optional for account creation only)
      errors:
        - ErrInvalidKey: Invalid credentials or PEM format
    
    - name: WithNetwork
      signature: "func WithNetwork(network string) SignerOption"
      description: Sets blockchain network (required)
      parameters:
        - name: network
          type: string
          description: x402 network identifier
          required: true
          examples: ["base", "base-sepolia", "ethereum", "sepolia", "solana", "solana-devnet"]
      errors:
        - ErrInvalidNetwork: Unsupported or invalid network
    
    - name: WithToken
      signature: "func WithToken(symbol, address string) SignerOption"
      description: Adds a payment token with default priority (0)
      parameters:
        - name: symbol
          type: string
          description: Token symbol
          required: true
          examples: ["eth", "usdc", "dai"]
        - name: address
          type: string
          description: Token contract address (zero address for native token)
          required: true
          examples: ["0x0000000000000000000000000000000000000000", "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"]
    
    - name: WithTokenPriority
      signature: "func WithTokenPriority(symbol, address string, priority int) SignerOption"
      description: Adds a payment token with specific priority
      parameters:
        - name: symbol
          type: string
          description: Token symbol
          required: true
        - name: address
          type: string
          description: Token contract address
          required: true
        - name: priority
          type: int
          description: Token priority (lower = higher priority)
          required: true
          default: 0
    
    - name: WithPriority
      signature: "func WithPriority(priority int) SignerOption"
      description: Sets signer selection priority
      parameters:
        - name: priority
          type: int
          description: Signer priority (lower = higher priority)
          required: true
          default: 0
    
    - name: WithMaxAmountPerCall
      signature: "func WithMaxAmountPerCall(amount *big.Int) SignerOption"
      description: Sets maximum amount per signing call
      parameters:
        - name: amount
          type: "*big.Int"
          description: Maximum amount in smallest unit (wei, lamports)
          required: true
          default: null (no limit)
  
  returns:
    - name: signer
      type: "*Signer"
      description: Initialized CDP signer instance
    - name: error
      type: error
      description: Error if initialization fails
  
  errors:
    - name: ErrInvalidKey
      condition: Invalid or missing CDP credentials
      message: "invalid CDP credentials"
    - name: ErrInvalidNetwork
      condition: Network not specified or unsupported
      message: "invalid or unsupported network"
    - name: ErrNoTokens
      condition: No tokens configured
      message: "at least one token required"
    - name: CDP API errors
      condition: Account creation/retrieval fails
      message: Various (auth failure, network error, rate limit, etc.)
  
  example: |
    signer, err := coinbase.NewSigner(
        coinbase.WithCDPCredentials(
            os.Getenv("CDP_API_KEY_NAME"),
            os.Getenv("CDP_API_KEY_SECRET"),
            os.Getenv("CDP_WALLET_SECRET"),
        ),
        coinbase.WithNetwork("base-sepolia"),
        coinbase.WithToken("eth", "0x0000000000000000000000000000000000000000"),
        coinbase.WithMaxAmountPerCall(big.NewInt(1000000000000000000)),
    )

## Interface Methods (x402.Signer)

Network:
  description: Returns the blockchain network identifier
  signature: "func (s *Signer) Network() string"
  returns:
    type: string
    description: x402 network identifier
    examples: ["base", "base-sepolia", "ethereum", "sepolia", "solana", "solana-devnet"]
  
Scheme:
  description: Returns the payment scheme
  signature: "func (s *Signer) Scheme() string"
  returns:
    type: string
    description: Payment scheme (always "exact" for CDP signer)
    value: "exact"

CanSign:
  description: Validates if signer can satisfy payment requirements
  signature: "func (s *Signer) CanSign(requirements *x402.PaymentRequirement) bool"
  parameters:
    - name: requirements
      type: "*x402.PaymentRequirement"
      description: Payment requirements to validate
      fields:
        - Network: Blockchain network
        - Scheme: Payment scheme
        - Token: Token symbol
        - Amount: Amount string
  returns:
    type: bool
    description: true if signer can sign, false otherwise
  logic: |
    1. Check network match (exact string comparison)
    2. Check scheme match (must be "exact")
    3. Check token match (case-insensitive comparison)
  example: |
    can := signer.CanSign(&x402.PaymentRequirement{
        Network: "base-sepolia",
        Scheme:  "exact",
        Token:   "eth",
        Amount:  "1000000000000000000",
    })
    // Returns: true

Sign:
  description: Signs payment transaction via CDP API
  signature: "func (s *Signer) Sign(requirements *x402.PaymentRequirement) (*x402.PaymentPayload, error)"
  parameters:
    - name: requirements
      type: "*x402.PaymentRequirement"
      description: Payment requirements
      fields:
        - Network: Blockchain network
        - Scheme: Payment scheme
        - Token: Token symbol
        - Amount: Amount string (in smallest unit)
  returns:
    - name: payload
      type: "*x402.PaymentPayload"
      description: Signed payment payload
      fields:
        - X402Version: Version number (1)
        - Scheme: Payment scheme ("exact")
        - Network: Blockchain network
        - Payload: Chain-specific payload (EVMPayload or SVMPayload)
    - name: error
      type: error
      description: Error if signing fails
  errors:
    - name: ErrNoValidSigner
      condition: CanSign returns false
      message: "no valid signer for requirements"
    - name: ErrInvalidAmount
      condition: Amount string parsing fails
      message: "invalid amount format"
    - name: ErrAmountExceeded
      condition: Amount exceeds maxAmount limit
      message: "amount exceeds maximum allowed"
    - name: CDP API errors
      condition: Signing request fails
      message: Various (auth failure, rate limit, server error, etc.)
  process: |
    1. Validate with CanSign() (return ErrNoValidSigner if false)
    2. Parse amount string to *big.Int (return ErrInvalidAmount if fails)
    3. Check maxAmount limit (return ErrAmountExceeded if exceeded)
    4. Build chain-specific signing request:
       - EVM: EIP-712 typed data (EIP-3009 authorization)
       - SVM: Solana transaction message (TransferChecked)
    5. Call CDP API sign endpoint with Wallet Auth
    6. Construct PaymentPayload with signature
    7. Return payload
  example: |
    payload, err := signer.Sign(&x402.PaymentRequirement{
        Network: "base-sepolia",
        Scheme:  "exact",
        Token:   "eth",
        Amount:  "500000000000000000", // 0.5 ETH
    })
    // Returns: &x402.PaymentPayload{...}

GetPriority:
  description: Returns signer selection priority
  signature: "func (s *Signer) GetPriority() int"
  returns:
    type: int
    description: Priority value (lower = higher priority)

GetTokens:
  description: Returns configured payment tokens
  signature: "func (s *Signer) GetTokens() []x402.TokenConfig"
  returns:
    type: "[]x402.TokenConfig"
    description: List of supported tokens with priorities

GetMaxAmount:
  description: Returns maximum amount per call
  signature: "func (s *Signer) GetMaxAmount() *big.Int"
  returns:
    type: "*big.Int"
    description: Maximum amount (nil if no limit)

## Additional Methods

Address:
  description: Returns blockchain wallet address
  signature: "func (s *Signer) Address() string"
  returns:
    type: string
    description: Blockchain address (EVM: 0x-prefixed hex, SVM: base58)
  example: |
    addr := signer.Address()
    // Returns: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"

## Helper Functions

CreateOrGetAccount:
  description: Creates or retrieves CDP account for network (idempotent)
  signature: "func CreateOrGetAccount(ctx context.Context, auth *CDPAuth, network string) (*CDPAccount, error)"
  parameters:
    - name: ctx
      type: context.Context
      description: Request context for timeout/cancellation
      required: true
    - name: auth
      type: "*CDPAuth"
      description: CDP authentication credentials
      required: true
    - name: network
      type: string
      description: x402 network identifier
      required: true
  returns:
    - name: account
      type: "*CDPAccount"
      description: CDP account with ID, address, and network
    - name: error
      type: error
      description: Error if operation fails
  behavior: |
    Idempotent operation:
    1. Maps x402 network to CDP network ID
    2. Lists existing accounts for credentials + network (GET)
    3. If account exists, returns it
    4. If no account, creates new one (POST)
    5. Returns account details
  errors:
    - name: ErrInvalidKey
      condition: Authentication fails
    - name: ErrInvalidNetwork
      condition: Unsupported network
    - name: CDP API errors
      condition: Request fails
  example: |
    account, err := coinbase.CreateOrGetAccount(
        context.Background(),
        auth,
        "base-sepolia",
    )
    // Returns: &CDPAccount{
    //   ID: "accounts/abc-123",
    //   Address: "0x742d...",
    //   Network: "base-sepolia",
    // }

## Types

CDPAuth:
  description: CDP authentication credentials and JWT generator
  fields:
    - name: apiKeyName
      type: string
      description: CDP API key identifier
    - name: apiKeySecret
      type: string
      description: PEM-encoded private key
    - name: walletSecret
      type: string
      description: Wallet-specific secret
  methods:
    - GenerateBearerToken(method, path string) (string, error)
    - GenerateWalletAuthToken(method, path string, bodyHash []byte) (string, error)

CDPClient:
  description: HTTP client for CDP API
  fields:
    - name: baseURL
      type: string
      description: CDP API base URL
    - name: httpClient
      type: "*http.Client"
      description: HTTP client instance
    - name: auth
      type: "*CDPAuth"
      description: Authentication handler
  methods:
    - doRequest(ctx, method, path string, body, result interface{}, requireWalletAuth bool) error
    - doRequestWithRetry(...) error

CDPAccount:
  description: CDP-managed blockchain account
  fields:
    - name: ID
      type: string
      description: CDP account identifier
    - name: Address
      type: string
      description: Blockchain address
    - name: Network
      type: string
      description: CDP network identifier

NetworkType:
  description: Blockchain type enumeration
  type: int
  constants:
    - NetworkTypeUnknown: 0
    - NetworkTypeEVM: 1
    - NetworkTypeSVM: 2

## Error Types

CDPError:
  description: Structured CDP API error
  fields:
    - name: StatusCode
      type: int
      description: HTTP status code
    - name: ErrorType
      type: string
      description: Error category
      values: ["rate_limit", "server_error", "auth_error", "client_error"]
    - name: Message
      type: string
      description: Error message
    - name: RequestID
      type: string
      description: CDP request ID
    - name: Retryable
      type: bool
      description: Whether error should be retried
    - name: RetryAfter
      type: time.Duration
      description: Suggested retry delay

## Integration

Usage with x402 HTTP Client:
  example: |
    import (
        "github.com/mark3labs/x402-go/http"
        coinbase "github.com/mark3labs/x402-go/signers/coinbase"
    )
    
    signer, _ := coinbase.NewSigner(...)
    
    client, _ := http.NewClient(
        http.WithSigner(signer),
    )
    
    resp, _ := client.Get("https://api.example.com/data")

Usage with multiple signers:
  example: |
    evmSigner, _ := coinbase.NewSigner(
        coinbase.WithNetwork("base"),
        ...
    )
    
    svmSigner, _ := coinbase.NewSigner(
        coinbase.WithNetwork("solana"),
        ...
    )
    
    client, _ := http.NewClient(
        http.WithSigner(evmSigner),
        http.WithSigner(svmSigner),
    )

## Environment Variables

Required:
  - CDP_API_KEY_NAME: API key identifier from CDP Portal
  - CDP_API_KEY_SECRET: PEM-encoded private key
  - CDP_WALLET_SECRET: Wallet secret for signing operations

Optional:
  - None (all configuration via functional options)

## Performance Characteristics

Account Creation:
  - Latency: <3s (first time)
  - Latency: <1s (retrieval)
  
Signer Initialization:
  - Latency: <2s
  
Transaction Signing:
  - Latency: <500ms (excluding network)
  
Concurrency:
  - Thread-safe: Yes (stateless, immutable)
  - Max concurrent requests: Limited by CDP rate limits (600 reads/500 writes per 10s)

## Security Considerations

Credential Management:
  - Never hardcode credentials
  - Load from environment variables
  - Use secrets management systems (Vault, AWS SM)
  
Logging:
  - Never log credentials or JWT tokens
  - Sanitize Authorization headers
  - Use [REDACTED] for sensitive data
  
TLS:
  - Always use HTTPS
  - Verify certificates (never disable in production)

## Testing

Unit Tests:
  - Table-driven tests for all public methods
  - Mock CDP API responses
  - Test error scenarios
  - Test concurrent access
  
Integration Tests:
  - Optional (skip if credentials not available)
  - Use CDP testnet (base-sepolia, solana-devnet)
  - Test account creation
  - Test transaction signing
  
Coverage:
  - Target: >80%
  - Measured with: go test -race -cover
